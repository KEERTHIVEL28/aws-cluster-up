#!/bin/bash

set -eu
set -o pipefail

PROGNAME=$(basename $0)
ACU_TOPDIR="$(cd $(dirname "${BASH_SOURCE[0]}") && pwd -P)"
source $ACU_TOPDIR/../libexec/aws-cluster-up/common.bash

noapply=0

while getopts "n" opt; do
    case "$opt" in
	n*) noapply=1;;
    esac
done

shift $((OPTIND-1))

if [[ $# -ne 2 ]]; then
    acu_die "usage: $PROGNAME <cluster-dir> <terraform-script.tf>"
fi

export ACU_CLUSTER_DIR=$1; shift
export ACU_TERRAFORM_SCRIPT=$1; shift

if [[ -d "$ACU_CLUSTER_DIR" ]]; then
    acu_die "directory '$ACU_CLUSTER_DIR' already exists!"
fi

if [[ ! -f "$ACU_TERRAFORM_SCRIPT" ]]; then
    acu_die "$ACU_TERRAFORM_SCRIPT does not exist!"
fi

if [[ ! -x "$ACU_TERRAFORM_SCRIPT" ]]; then
    acu_die "$ACU_TERRAFORM_SCRIPT is not executable!"
fi

mkdir -p "$ACU_CLUSTER_DIR/terraform"

# generate configuration
${ACU_TERRAFORM_SCRIPT:?} > "$ACU_CLUSTER_DIR/terraform/cluster.tf"

# Terraform's notion of where it is... is just not that great!
tf() {
    (cd "$ACU_CLUSTER_DIR/terraform"; terraform "$@")
}

tf init
tf plan -no-color -out=plan

[[ $noapply -eq 1 ]] && exit 0

tf apply -no-color ${ACU_TERRAFORM_AUTO_APPROVE:--auto-approve} plan
tf refresh -no-color

for i in $(acu_get_instances "$ACU_CLUSTER_DIR/terraform/terraform.tfstate"); do
    id=$(acu_get_instance_id "$i" "$ACU_CLUSTER_DIR/terraform/terraform.tfstate")
    cluster_name=$(basename "$ACU_CLUSTER_DIR")
    nodename=$(acu_aws_instance_nodename "$i")
    aws ec2 create-tags --resources "$id" --tags Key=Name,Value="$cluster_name-${nodename}"
    aws ec2 create-tags --resources "$id" --tags Key=kubernetes.io/cluster/$cluster_name,Value="true"
done

tf refresh -no-color
